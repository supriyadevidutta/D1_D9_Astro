# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WYrNZviIdDy_P62x8Dm2TFQrXaC76-tt
"""

import swisseph as swe
import datetime
import math
import gradio as gr

# Rasi Mapping
def rasi(planet_longitude):
    r = ["Ar", "Ta", "Ge", "Cn", "Le", "Vi", "Li", "Sc", "Sg", "Cp", "Aq", "Pi"]
    n = int(planet_longitude / 30)
    return r[n]

# Calculate Lagna Degrees
def calc_lagna_degrees(the_lati, the_longi, time_julian, ayanamsa_type):
    swe.set_sid_mode(ayanamsa_type, 0, 0)
    cusps, ascmc = swe.houses_ex(time_julian, the_lati, the_longi, b'P', 0)
    asc_mc_vals = ascmc[0]
    aya = swe.get_ayanamsa_ut(time_julian)
    correct_lagna = asc_mc_vals - aya
    if correct_lagna < 0:
        correct_lagna += 360
    elif correct_lagna > 360:
        correct_lagna -= 360
    return correct_lagna

# Calculate Navamsa Longitude
def calc_D9_long(longitude):
    return (longitude * 9) % 360

# Adjust for Timezone
def adjust_for_tz(dt, tzoffset):
    dt += datetime.timedelta(hours=tzoffset)
    return dt

# Trend Mapping
def get_trend(lagna_sign, navamsha_sign):
    trend_mapping = {
        ("Ar", "Ar"): "+", ("Ar", "Ta"): "+", ("Ar", "Ge"): "-", ("Ar", "Cn"): "-", ("Ar", "Le"): "+",
        ("Ar", "Vi"): "-", ("Ar", "Li"): "+", ("Ar", "Sc"): "+", ("Ar", "Sg"): "-", ("Ta", "Cp"): "+",
        ("Ta", "Aq"): "+", ("Ta", "Pi"): "-", ("Ta", "Ar"): "+", ("Ta", "Ta"): "+", ("Ta", "Ge"): "-",
        ("Ta", "Cn"): "+", ("Ta", "Le"): "+", ("Ta", "Vi"): "-", ("Ge", "Li"): "+", ("Ge", "Sc"): "+",
        ("Ge", "Sg"): "-", ("Ge", "Cp"): "+", ("Ge", "Aq"): "+", ("Ge", "Pi"): "-", ("Ge", "Ar"): "+",
        ("Ge", "Ta"): "+", ("Ge", "Ge"): "-", ("Cn", "Cn"): "+", ("Cn", "Le"): "+", ("Cn", "Vi"): "-",
        ("Cn", "Li"): "+", ("Cn", "Sc"): "+", ("Cn", "Sg"): "-", ("Cn", "Cp"): "+", ("Cn", "Aq"): "+",
        ("Cn", "Pi"): "-", ("Le", "Ar"): "+", ("Le", "Ta"): "+", ("Le", "Ge"): "-", ("Le", "Cn"): "+",
        ("Le", "Le"): "+", ("Le", "Vi"): "-", ("Le", "Li"): "+", ("Le", "Sc"): "+", ("Le", "Sg"): "-",
        ("Vi", "Cp"): "+", ("Vi", "Aq"): "+", ("Vi", "Pi"): "-", ("Vi", "Ar"): "+", ("Vi", "Ta"): "+",
        ("Vi", "Ge"): "-", ("Vi", "Cn"): "+", ("Vi", "Le"): "+", ("Vi", "Vi"): "-", ("Li", "Li"): "+",
        ("Li", "Sc"): "+", ("Li", "Sg"): "-", ("Li", "Cp"): "+", ("Li", "Aq"): "+", ("Li", "Pi"): "-",
        ("Li", "Ar"): "+", ("Li", "Ta"): "+", ("Li", "Ge"): "-", ("Sc", "Cn"): "+", ("Sc", "Le"): "+",
        ("Sc", "Vi"): "-", ("Sc", "Li"): "+", ("Sc", "Sc"): "+", ("Sc", "Sg"): "-", ("Sc", "Cp"): "+",
        ("Sc", "Aq"): "+", ("Sc", "Pi"): "-", ("Sg", "Ar"): "+", ("Sg", "Ta"): "+", ("Sg", "Ge"): "-",
        ("Sg", "Cn"): "+", ("Sg", "Le"): "+", ("Sg", "Vi"): "-", ("Sg", "Li"): "+", ("Sg", "Sc"): "+",
        ("Sg", "Sg"): "-", ("Cp", "Cp"): "+", ("Cp", "Aq"): "+", ("Cp", "Pi"): "-", ("Cp", "Ar"): "+",
        ("Cp", "Ta"): "+", ("Cp", "Ge"): "-", ("Cp", "Cn"): "+", ("Cp", "Le"): "+", ("Cp", "Vi"): "-",
        ("Aq", "Li"): "+", ("Aq", "Sc"): "+", ("Aq", "Sg"): "-", ("Aq", "Cp"): "+", ("Aq", "Aq"): "+",
        ("Aq", "Pi"): "-", ("Aq", "Ar"): "+", ("Aq", "Ta"): "+", ("Aq", "Ge"): "-", ("Pi", "Cn"): "+",
        ("Pi", "Le"): "-", ("Pi", "Vi"): "-", ("Pi", "Li"): "+", ("Pi", "Sc"): "+", ("Pi", "Sg"): "-",
        ("Pi", "Cp"): "+", ("Pi", "Aq"): "+", ("Pi", "Pi"): "-"
    }
    return trend_mapping.get((lagna_sign, navamsha_sign), "N/A")

# Convert Decimal Degrees to DMS
def DMS2Deg(decimal_deg):
    lon_deg = decimal_deg % 30
    deg = math.floor(lon_deg)
    min1 = (lon_deg - deg) * 60
    min = math.floor(min1)
    sec = (min1 - min) * 60
    deg1 = str(deg) + 'Â° ' + str(round(min, 0)) + "' " + str(round(sec, 0)) + '"'
    return deg1

# Get Planet Degree
def calc_planet_degree(jdut, planet_id, ayanamsa_type):
    swe.set_sid_mode(ayanamsa_type, 0, 0)
    planet_data = swe.calc_ut(jdut, planet_id, swe.FLG_SIDEREAL | swe.FLG_TRUEPOS)
    return planet_data[0][0]

# Main function to calculate and print Lagna transits with trend
def calc_and_print_lagna_transits(date, longi, lati, tzoffset):
    year, month, day = [int(x) for x in date.split('-')]
    utc = swe.utc_time_zone(year, month, day, 0, 0, 0, tzoffset)
    jdet, jdut = swe.utc_to_jd(*utc)
    start_time = jdut
    end_time = start_time + 1  # one day later

    current_time = start_time
    prev_lagna = None
    prev_navamsha = None

    result = []

    while current_time < end_time:
        lagna_deg = calc_lagna_degrees(lati, longi, current_time, swe.SIDM_KRISHNAMURTI_VP291)
        lagna_sign = rasi(lagna_deg)
        navamsha_deg = calc_D9_long(lagna_deg)
        navamsha_sign = rasi(navamsha_deg)
        trend = get_trend(lagna_sign, navamsha_sign)

        if lagna_sign != prev_lagna or navamsha_sign != prev_navamsha:
            time_utc = swe.revjul(current_time, swe.GREG_CAL)

            if len(time_utc) >= 4:
                date_part, time_part = time_utc[:3], time_utc[3]
                hours = int(time_part)
                minutes = int((time_part - hours) * 60)
                seconds = int((((time_part - hours) * 60) - minutes) * 60)
                dt = datetime.datetime(int(date_part[0]), int(date_part[1]), int(date_part[2]),
                                       hours, minutes, seconds)
                adjusted_dt = adjust_for_tz(dt, tzoffset)
                formatted_time = adjusted_dt.strftime("%Y-%m-%d %H:%M:%S")
            else:
                formatted_time = "Invalid time format"

            lagna_dms = DMS2Deg(lagna_deg)
            navamsha_dms = DMS2Deg(navamsha_deg)

            # Get planet positions
            sun_deg = calc_planet_degree(current_time, swe.SUN, swe.SIDM_KRISHNAMURTI_VP291)
            jupiter_deg = calc_planet_degree(current_time, swe.JUPITER, swe.SIDM_KRISHNAMURTI_VP291)
            mars_deg = calc_planet_degree(current_time, swe.MARS, swe.SIDM_KRISHNAMURTI_VP291)
            venus_deg = calc_planet_degree(current_time, swe.VENUS, swe.SIDM_KRISHNAMURTI_VP291)
            mercury_deg = calc_planet_degree(current_time, swe.MERCURY, swe.SIDM_KRISHNAMURTI_VP291)

            sun_dms = DMS2Deg(sun_deg)
            jupiter_dms = DMS2Deg(jupiter_deg)
            mars_dms = DMS2Deg(mars_deg)
            venus_dms = DMS2Deg(venus_deg)
            mercury_dms = DMS2Deg(mercury_deg)

            sun_sign = rasi(sun_deg)
            jupiter_sign = rasi(jupiter_deg)
            mars_sign = rasi(mars_deg)
            venus_sign = rasi(venus_deg)
            mercury_sign = rasi(mercury_deg)

            result.append(f"{formatted_time} | {lagna_dms} | {lagna_sign} | {navamsha_dms} | {navamsha_sign} | {trend} | {sun_dms} | {sun_sign} | {jupiter_dms} | {jupiter_sign} | {mars_dms} | {mars_sign} | {venus_dms} | {venus_sign} | {mercury_dms} | {mercury_sign}")

            prev_lagna = lagna_sign
            prev_navamsha = navamsha_sign

        current_time += 1 / 1440  # increment by 1 minute

    return '\n'.join(result)

# Create Gradio Interface
iface = gr.Interface(
    fn=calc_and_print_lagna_transits,
    inputs=[
        gr.inputs.Textbox(lines=1, placeholder="YYYY-MM-DD", label="Date"),
        gr.inputs.Textbox(lines=1, placeholder="Longitude", label="Longitude"),
        gr.inputs.Textbox(lines=1, placeholder="Latitude", label="Latitude"),
        gr.inputs.Textbox(lines=1, placeholder="Timezone Offset", label="Timezone Offset")
    ],
    outputs="text",
    title="Vedic Astrology Lagna Transit Calculator",
    description="Calculate and print the Lagna transits with trends and planetary positions for a given date, longitude, and latitude."
)

iface.launch()